name: Terraform Cloud Apply with Retry

on:
  schedule:
    - cron: '0 8 * * 1-5'  # 8 AM UTC Monday-Friday
    - cron: '0 18 * * 1-5' # 6 PM UTC Monday-Friday
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-24.04
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: upload
        with:
          workspace: ${{ secrets.TF_WORKSPACE }}
          directory: "."
          speculative: false
        env:
          TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

      - name: Create Run
        id: create_run
        run: |
          RESPONSE=$(curl --fail --silent --show-error \
            --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            --request POST \
            --data "{
              \"data\": {
                \"attributes\": {
                  \"is-destroy\": false,
                  \"message\": \"Triggered by GitHub Actions\"
                },
                \"type\": \"runs\",
                \"relationships\": {
                  \"workspace\": {
                    \"data\": {
                      \"type\": \"workspaces\",
                      \"id\": \"${{ secrets.TF_WORKSPACE }}\"
                    }
                  }
                }
              }
            }" \
            "https://app.terraform.io/api/v2/runs")

          # Save response for debugging
          echo "$RESPONSE" > run_response.json

          # Extract and verify run ID
          RUN_ID=$(echo "$RESPONSE" | jq -r '.data.id')
          if [ "$RUN_ID" = "null" ] || [ -z "$RUN_ID" ]; then
            echo "Error: Failed to get run ID from response"
            echo "Response was:"
            cat run_response.json
            exit 1
          fi

          # Set output for next step
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
          echo "Created run with ID: $RUN_ID"

      - name: Wait and Confirm Apply
        if: success()
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          RUN_ID: ${{ steps.create_run.outputs.run_id }}
        run: |
          if [ -z "$RUN_ID" ]; then
            echo "Error: RUN_ID is empty"
            exit 1
          fi

          echo "Starting confirmation process for run: $RUN_ID"
          attempts=0
          max_attempts=5  # Increased attempts
          wait_time=30    # Seconds between attempts

          while [ $attempts -lt $max_attempts ]; do
            echo "Checking run status (attempt $((attempts + 1)))"
            
            RESPONSE=$(curl --fail --silent --show-error \
              --header "Authorization: Bearer $TF_API_TOKEN" \
              "https://app.terraform.io/api/v2/runs/$RUN_ID")
            
            STATUS=$(echo "$RESPONSE" | jq -r '.data.attributes.status')
            echo "Current status: $STATUS"

            case "$STATUS" in
              "planned")
                echo "Plan is ready, confirming apply..."
                curl --fail --silent --show-error \
                  --header "Authorization: Bearer $TF_API_TOKEN" \
                  --header "Content-Type: application/vnd.api+json" \
                  --request POST \
                  --data '{"comment": "Auto-approved by GitHub Actions"}' \
                  "https://app.terraform.io/api/v2/runs/$RUN_ID/actions/apply"
                echo "Apply confirmed successfully"
                exit 0
                ;;
              "errored"|"discarded"|"canceled")
                echo "Run failed with status: $STATUS"
                exit 1
                ;;
              "applied"|"planned_and_finished")
                echo "Run completed successfully with status: $STATUS"
                exit 0
                ;;
              *)
                echo "Waiting for plan to complete... (status: $STATUS)"
                ;;
            esac

            attempts=$((attempts + 1))
            if [ $attempts -lt $max_attempts ]; then
              echo "Sleeping for $wait_time seconds..."
              sleep $wait_time
            fi
          done

          echo "Error: Max attempts ($max_attempts) reached waiting for plan"
          exit 1
